package com.teamHelper.bot;

import com.teamHelper.model.CalendarEvent;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;

@Component
public class BotComponent extends TelegramLongPollingBot {

    private static final Logger log = LoggerFactory.getLogger(BotComponent.class);

    @Autowired
    private MessageBuilder messageBuilder;

    @Value("${TELEGRAM_BOT_USERNAME}")
    private String botUsername;

    @Value("${TELEGRAM_BOT_TOKEN}")
    private String botToken;

    @Value("${TELEGRAM_BOT_ADMIN_CHAT_ID}")
    private String adminChatId;

    @Value("${TELEGRAM_BOT_ERROR_CHAT_ID}")
    private String errorChatId;

    public BotComponent(@Value("${telegram.bot.token:}") String botToken) {
        super(botToken);
        if (botToken != null && botToken.length() >= 6) {
            System.out.println("üü¢ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–æ–∫–µ–Ω: " + botToken.substring(0, 6) + "...");
        } else {
            System.out.println("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π");
        }
    }

    @PostConstruct
    public void register() {
        try {
            TelegramBotsApi api = new TelegramBotsApi(DefaultBotSession.class);
            api.registerBot(this);
            log.info("–ë–æ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Telegram API");
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞: {}", e.getMessage());
        }
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç
     */
    public void sendCalendarNotification(CalendarEvent event, Long chatId) {
        try {
            String text = messageBuilder.buildEventMessage(event);
            SendMessage message = new SendMessage(chatId.toString(), text);
            message.enableHtml(true);
            message.setParseMode("MarkdownV2");
            execute(message);
        } catch (TelegramApiException e) {
            sendErrorMessage("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    public void sendErrorMessage(String text) {
        if (errorChatId != null) {
            try {
                SendMessage message = new SendMessage(errorChatId, text);
                execute(message);
            } catch (TelegramApiException e) {
                System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –æ—à–∏–±–æ–∫: " + e.getMessage());
            }
        }
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update);
        }
    }

    private void handleIncomingMessage(Update update) {
        String messageText = update.getMessage().getText();
        long chatId = update.getMessage().getChatId();

        String helpText = """
                –Ø –º–∞–ª–µ–Ω—å–∫–∏–π –∏ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–Ω–∞—é.
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                """;

        switch (messageText) {
            case "/start" -> sendResponse(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–∏–Ω–∞—é –æ —Å–æ–±—ã—Ç–∏—è—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∫–æ–º–∞–Ω–¥–µ.");
            default -> sendResponse(chatId, helpText);
        }
    }

    private void sendResponse(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {}", e.getMessage());
        }
    }
}