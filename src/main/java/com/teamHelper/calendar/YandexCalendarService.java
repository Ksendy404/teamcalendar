
package com.teamHelper.calendar;

import com.teamHelper.bot.BotComponent;
import com.teamHelper.config.CalendarAccountsProperties;
import com.teamHelper.model.CalendarEvent;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import static com.teamHelper.calendar.CalendarConstants.WORK_END;
import static com.teamHelper.calendar.CalendarConstants.WORK_START;

@Slf4j
@Service
@RequiredArgsConstructor
public class YandexCalendarService {

    private final CalendarAccountsProperties calendarAccounts;
    private final YandexCalDavService calDavService;
    private final BotComponent bot;
    private final List<CalendarEvent> cachedEvents = new CopyOnWriteArrayList<>();

    @Scheduled(cron = "0 */2 * * * *") // –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    public void updateCalendar() {
        if (LocalTime.now().isAfter(WORK_END)) {
          //  log.info("‚è≥ –ü–æ—Å–ª–µ " + WORK_END + " ‚Äî –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è");
            return;
        }

        log.info("–°—Ç–∞—Ä—Ç YandexCalendarService");

        List<CalendarEvent> allEvents = new ArrayList<>();

        for (var account : calendarAccounts.getAccounts()) {
            try {
                log.debug("–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é {}", account.getId());

                List<CalendarEvent> events = calDavService.getUpcomingEvents(account);
                events = events.stream()
                        .filter(e -> e.getStart().toLocalDate().equals(LocalDate.now()))
                        .toList();

                log.info("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {} —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è {}", events.size(), account.getId());

                allEvents.addAll(events);
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è {}: {}", account.getId(), e.getMessage(), e);
            }
        }

        log.info("‚ôªÔ∏è –ö–∞–ª–µ–Ω–¥–∞—Ä—å –æ–±–Ω–æ–≤–ª—ë–Ω: {} —Å–æ–±—ã—Ç–∏–π", allEvents.size());
    }

    @PostConstruct
    public void init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        LocalTime now = LocalTime.now();
        if (!now.isBefore(WORK_START) && !now.isAfter(WORK_END)) {
            checkMissedEventsOnStart();
        }
    }

    public void checkMissedEventsOnStart() {
        log.info("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞");

        LocalDateTime now = LocalDateTime.now();
        LocalDateTime inFiveMinutes = now.plusMinutes(5);

        calendarAccounts.getAccounts().forEach(account -> {
            log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è {} ‚Üí {}", account.getId(), account.getUrl());

            try {
                List<CalendarEvent> events = calDavService.getUpcomingEvents(account);
                List<CalendarEvent> missed = events.stream()
                        .filter(event -> {
                            LocalDateTime start = event.getStart();
                            return start.isAfter(now) && start.isBefore(inFiveMinutes);
                        })
                        .toList();

                log.info("–ü—Ä–æ–ø—É—â–µ–Ω–æ {} —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è {}", missed.size(), account.getId());

                missed.forEach(event -> {
                    bot.sendCalendarNotification(event, account.getTelegramChatId());
                });

            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è {}: {}", account.getId(), e.getMessage());
            }
        });
    }

    @Scheduled(cron = "0 0 0 * * *")  // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    public void clearCache() {
        log.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
        cachedEvents.clear();
    }
}
