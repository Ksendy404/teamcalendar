package com.teamHelper.calendar;

import com.teamHelper.bot.BotComponent;
import com.teamHelper.model.CalendarEvent;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static com.teamHelper.calendar.CalendarConstants.CHECK_INTERVAL_MINUTES;
import static com.teamHelper.calendar.CalendarConstants.NOTIFY_BEFORE_MINUTES;

@Slf4j
@Service
@RequiredArgsConstructor
public class YandexCalendarService {

    private final YandexCalDavService calDavService;
    private final BotComponent bot;
    private final Set<String> notifiedEvents = new HashSet<>();
    private boolean isFirstCheckToday = true;

    // –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
    private static final LocalTime WORK_START = LocalTime.of(8, 55);
    private static final LocalTime WORK_END = LocalTime.of(18, 0);
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm");

    @Scheduled(fixedRate = CHECK_INTERVAL_MINUTES * 60 * 1000)
    public void checkUpcomingEvents() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—á–µ–µ –ª–∏ –≤—Ä–µ–º—è
        LocalTime now = LocalTime.now();
        if (now.isBefore(WORK_START) || now.isAfter(WORK_END)) {
            log.debug("–í–Ω–µ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ ({} - {}), –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø—Ä–æ–ø—É—â–µ–Ω–∞", WORK_START, WORK_END);
            return;
        }

        try {
            List<CalendarEvent> events = calDavService.getUpcomingEvents();

            // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
            if (isFirstCheckToday && !events.isEmpty()) {
                logDailyEventsSummary(events);
                isFirstCheckToday = false;
            }

            if (events.isEmpty()) {
                return;
            }

            long notifiedCount = events.stream()
                    .peek(event -> log.debug("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–±—ã—Ç–∏–µ: '{}' –Ω–∞ {}", event.getTitle(), event.getStart()))
                    .mapToLong(event -> processEvent(event) ? 1 : 0)
                    .sum();

            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (notifiedCount > 0) {
                log.info("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", notifiedCount);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–±—ã—Ç–∏–π: {}", e.getMessage());
            bot.sendErrorMessage("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: " + e.getMessage());
        }
    }

    private void logDailyEventsSummary(List<CalendarEvent> events) {
        log.info("–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({} —Å–æ–±—ã—Ç–∏–π):", events.size());

        events.stream()
                .filter(event -> event.getStart() != null)
                .sorted((e1, e2) -> e1.getStart().compareTo(e2.getStart()))
                .forEach(event -> {
                    String timeStr = event.getStart().format(TIME_FORMATTER);
                    log.info("  ‚Ä¢ {} - {}", timeStr, event.getTitle());
                });
    }

    private boolean processEvent(CalendarEvent event) {
        if (shouldNotify(event)) {
            log.info("–û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: '{}' (–Ω–∞—á–∞–ª–æ –≤ {})",
                    event.getTitle(), event.getStart().format(TIME_FORMATTER));

            try {
                bot.sendCalendarNotification(event);
                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: '{}'", event.getTitle());
                return true;
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{}': {}", event.getTitle(), e.getMessage());
                return false;
            }
        }
        return false;
    }

    @PostConstruct
    public void init() {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ (–ø—Ä–æ–≤–µ—Ä–∫–∞: {} –º–∏–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {} –º–∏–Ω –¥–æ —Å–æ–±—ã—Ç–∏—è, —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: {} - {})",
                CHECK_INTERVAL_MINUTES, NOTIFY_BEFORE_MINUTES, WORK_START, WORK_END);

        try {
            calDavService.testCalDavConnection();
            log.info("CalDAV –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è CalDAV: {}", e.getMessage());
            bot.sendErrorMessage("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CalDAV: " + e.getMessage());
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        LocalTime now = LocalTime.now();
        if (!now.isBefore(WORK_START) && !now.isAfter(WORK_END)) {
            checkMissedEvents();
        }
    }

    private void checkMissedEvents() {
        try {
            List<CalendarEvent> events = calDavService.getUpcomingEvents();

            long missedCount = events.stream()
                    .filter(e -> e.getStart().isAfter(LocalDateTime.now().minusMinutes(5)))
                    .filter(e -> e.getStart().isBefore(LocalDateTime.now().plusMinutes(NOTIFY_BEFORE_MINUTES)))
                    .peek(e -> {
                        log.info("–ü—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: '{}' ({})", e.getTitle(), e.getStart().format(TIME_FORMATTER));
                        processEvent(e);
                    })
                    .count();

            if (missedCount > 0) {
                log.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π", missedCount);
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {}", e.getMessage());
            bot.sendErrorMessage("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: " + e.getMessage());
        }
    }

    private boolean shouldNotify(CalendarEvent event) {
        if (event.getStart() == null || notifiedEvents.contains(event.getId())) {
            return false;
        }

        LocalDateTime now = LocalDateTime.now();
        Duration timeUntilEvent = Duration.between(now, event.getStart());

        long totalSeconds = timeUntilEvent.getSeconds();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –≤ –±—É–¥—É—â–µ–º –∏ –¥–æ –Ω–µ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å —Ä–æ–≤–Ω–æ 5 –º–∏–Ω—É—Ç –∏–ª–∏ –º–µ–Ω—å—à–µ
        boolean shouldNotify = !timeUntilEvent.isNegative()
                && totalSeconds <= (NOTIFY_BEFORE_MINUTES * 60)
                && totalSeconds > ((NOTIFY_BEFORE_MINUTES - 1) * 60);

        if (shouldNotify) {
            notifiedEvents.add(event.getId());
        }

        return shouldNotify;
    }

    @Scheduled(cron = "0 0 0 * * ?") // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
    public void clearNotifiedEventsCache() {
        int clearedCount = notifiedEvents.size();
        notifiedEvents.clear();
        isFirstCheckToday = true;

        if (clearedCount > 0) {
            log.info("üßπ –û—á–∏—â–µ–Ω –∫–µ—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {} –∑–∞–ø–∏—Å–µ–π", clearedCount);
        }
    }
}