package com.example;

import com.teamHelper.bot.BotComponent;
import com.teamHelper.bot.MessageBuilder;
import com.teamHelper.model.CalendarEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.LocalDateTime;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class BotComponentTest {

    @Mock
    private MessageBuilder messageBuilder;

    @Mock
    private Update update;

    @Mock
    private Message message;

    private BotComponent botComponent;

    @BeforeEach
    void setUp() {
        // –°–æ–∑–¥–∞–µ–º –±–æ—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        botComponent = new BotComponent("test_token");
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –±–æ—Ç–∞")
    void shouldReturnCorrectBotUsername() {
        // Arrange
        String expectedUsername = "test_bot";
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ @Value, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º reflection –∏–ª–∏ —Å–µ—Ç—Ç–µ—Ä

        // Act & Assert
        // –ü–æ—Å–∫–æ–ª—å–∫—É botUsername —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ @Value, –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–æ –º–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ
        assertNotNull(botComponent.getBotUsername());
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start")
    void shouldHandleStartCommand() {
        // Arrange
        when(update.hasMessage()).thenReturn(true);
        when(update.getMessage()).thenReturn(message);
        when(message.hasText()).thenReturn(true);
        when(message.getText()).thenReturn("/start");
        when(message.getChatId()).thenReturn(12345L);

        // Act
        botComponent.onUpdateReceived(update);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        verify(update).hasMessage();
        verify(message).hasText();
        verify(message).getText();
        verify(message).getChatId();
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /check")
    void shouldHandleCheckCommand() {
        // Arrange
        when(update.hasMessage()).thenReturn(true);
        when(update.getMessage()).thenReturn(message);
        when(message.hasText()).thenReturn(true);
        when(message.getText()).thenReturn("/check");
        when(message.getChatId()).thenReturn(12345L);

        // Act
        botComponent.onUpdateReceived(update);

        // Assert
        verify(message).getText();
        verify(message).getChatId();
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    void shouldHandleUnknownCommands() {
        // Arrange
        when(update.hasMessage()).thenReturn(true);
        when(update.getMessage()).thenReturn(message);
        when(message.hasText()).thenReturn(true);
        when(message.getText()).thenReturn("/unknown");
        when(message.getChatId()).thenReturn(12345L);

        // Act
        botComponent.onUpdateReceived(update);

        // Assert
        verify(message).getText();
        verify(message).getChatId();
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
    void shouldIgnoreMessagesWithoutText() {
        // Arrange
        when(update.hasMessage()).thenReturn(true);
        when(update.getMessage()).thenReturn(message);
        when(message.hasText()).thenReturn(false);

        // Act
        botComponent.onUpdateReceived(update);

        // Assert
        verify(update).hasMessage();
        verify(message).hasText();
        verify(message, never()).getText();
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–ø–¥–µ–π—Ç—ã –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
    void shouldIgnoreUpdatesWithoutMessages() {
        // Arrange
        when(update.hasMessage()).thenReturn(false);

        // Act
        botComponent.onUpdateReceived(update);

        // Assert
        verify(update).hasMessage();
        verify(update, never()).getMessage();
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö")
    void shouldSendCalendarNotifications() {
        // Arrange
        CalendarEvent event = new CalendarEvent();
        event.setTitle("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ");
        event.setStart(LocalDateTime.now().plusMinutes(5));
        event.setEnd(LocalDateTime.now().plusMinutes(30));

        String expectedMessage = "üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ";
        when(messageBuilder.buildEventMessage(event)).thenReturn(expectedMessage);

        // Act
        botComponent.sendCalendarNotification(event);

        // Assert
        verify(messageBuilder).buildEventMessage(event);
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö")
    void shouldSendErrorMessages() {
        // Arrange
        String errorText = "–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞";

        // Act
        botComponent.sendErrorMessage(errorText);

        // Assert
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        assertDoesNotThrow(() -> botComponent.sendErrorMessage(errorText));
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
    void shouldHandleRegularTextAsUnknownCommand() {
        // Arrange
        when(update.hasMessage()).thenReturn(true);
        when(update.getMessage()).thenReturn(message);
        when(message.hasText()).thenReturn(true);
        when(message.getText()).thenReturn("–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?");
        when(message.getChatId()).thenReturn(12345L);

        // Act
        botComponent.onUpdateReceived(update);

        // Assert
        verify(message).getText();
        verify(message).getChatId();
    }
}