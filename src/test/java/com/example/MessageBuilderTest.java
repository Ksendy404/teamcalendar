package com.example;

import com.teamHelper.bot.MessageBuilder;
import com.teamHelper.model.CalendarEvent;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

public class MessageBuilderTest {

    private MessageBuilder messageBuilder;

    @BeforeEach
    void setUp() {
        messageBuilder = new MessageBuilder();
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ")
    void shouldFormatBasicEvent() {
        // Arrange
        CalendarEvent event = new CalendarEvent();
        event.setTitle("–í—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã");
        event.setStart(LocalDateTime.of(2024, 1, 15, 10, 0));
        event.setEnd(LocalDateTime.of(2024, 1, 15, 11, 0));

        // Act
        String result = messageBuilder.buildEventMessage(event);

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("üîî  –í—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã"));
        assertTrue(result.contains("‚è∞  `10:00` \\- `11:00`"));
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º")
    void shouldFormatEventWithDescription() {
        // Arrange
        CalendarEvent event = new CalendarEvent();
        event.setTitle("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞");
        event.setDescription("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç");
        event.setStart(LocalDateTime.of(2024, 1, 15, 14, 0));
        event.setEnd(LocalDateTime.of(2024, 1, 15, 15, 30));

        // Act
        String result = messageBuilder.buildEventMessage(event);

        // Assert
        assertTrue(result.contains("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞"));
        assertTrue(result.contains("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ø—Ä–∏–Ω—Ç"));
        assertTrue(result.contains("`14:00` \\- `15:30`"));
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –ª–æ–∫–∞—Ü–∏–µ–π")
    void shouldFormatEventWithLocation() {
        // Arrange
        CalendarEvent event = new CalendarEvent();
        event.setTitle("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è");
        event.setStart(LocalDateTime.of(2024, 1, 15, 16, 0));
        event.setEnd(LocalDateTime.of(2024, 1, 15, 17, 0));

        CalendarEvent.Location location = new CalendarEvent.Location();
        location.setTitle("–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-–∑–∞–ª –ê");
        event.setLocation(location);

        // Act
        String result = messageBuilder.buildEventMessage(event);

        // Assert
        assertTrue(result.contains("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"));
        assertTrue(result.contains("*–ú–µ—Å—Ç–æ\\:* –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü\\-–∑–∞–ª –ê"));
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2")
    void shouldEscapeMarkdownV2Characters() {
        // Arrange
        String textWithSpecialChars = "Test_with*special[chars]()~`>#+=|{}.!-:";

        // Act
        String result = messageBuilder.escapeMarkdownV2(textWithSpecialChars);

        // Assert
        assertEquals("Test\\_with\\*special\\[chars\\]\\(\\)\\~\\`\\>\\#\\+\\=\\|\\{\\}\\.\\!\\-\\:", result);
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å null –∑–Ω–∞—á–µ–Ω–∏—è")
    void shouldHandleNullValues() {
        // Arrange
        CalendarEvent event = new CalendarEvent();
        event.setTitle("–°–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π");
        event.setStart(LocalDateTime.of(2024, 1, 15, 10, 0));
        event.setEnd(LocalDateTime.of(2024, 1, 15, 11, 0));
        event.setDescription(null);
        event.setLocation(null);

        // Act
        String result = messageBuilder.buildEventMessage(event);

        // Assert
        assertNotNull(result);
        assertTrue(result.contains("–°–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π"));
        assertFalse(result.contains("null"));
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏")
    void shouldHandleEmptyStrings() {
        // Act
        String result = messageBuilder.escapeMarkdownV2("");

        // Assert
        assertEquals("", result);
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å null –ø—Ä–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
    void shouldHandleNullInEscaping() {
        // Act
        String result = messageBuilder.escapeMarkdownV2(null);

        // Assert
        assertEquals("", result);
    }

    @Test
    @DisplayName("–î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
    void shouldFormatCompleteEvent() {
        // Arrange
        CalendarEvent event = new CalendarEvent();
        event.setTitle("–í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞!");
        event.setDescription("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –Ω–∞ Q1-2024");
        event.setStart(LocalDateTime.of(2024, 1, 15, 9, 30));
        event.setEnd(LocalDateTime.of(2024, 1, 15, 10, 45));

        CalendarEvent.Location location = new CalendarEvent.Location();
        location.setTitle("Zoom (—Å—Å—ã–ª–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏)");
        event.setLocation(location);

        // Act
        String result = messageBuilder.buildEventMessage(event);

        // Assert
        assertTrue(result.contains("üîî  –í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\\!"));
        assertTrue(result.contains("‚è∞  `09:30` \\- `10:45`"));
        assertTrue(result.contains("–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –Ω–∞ Q1\\-2024"));
        assertTrue(result.contains("*–ú–µ—Å—Ç–æ\\:* Zoom \\(—Å—Å—ã–ª–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\\)"));
    }
}
